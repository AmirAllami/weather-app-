{"version":3,"sources":["components/Header.js","components/CurrentWeather.js","components/MiniDayForcast.js","components/NextDays.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","onSubmit","this","props","handleSubmit","type","placeholder","onChange","handlechange","id","style","backgroundColor","unit","color","onClick","changeUnitToC","changeUnitToF","Component","CurrentWeather","dataCurrent","dataC","unixtime","data","dt","a","Date","year","getFullYear","month","getMonth","time","getDate","getHours","getMinutes","substr","country","sys","main2","weather","main","icons","faBolt","faCloudRain","faCloudShowersHeavy","faSnowflake","faSun","faCloud","faSmog","name","countryCode","width","height","svg","icon","fontSize","description","temp","humidity","wind","speed","temp_max","temp_min","MiniDayForcast","dayData","imgLink","day","eve","src","alt","NextDays","data1","dataNextDays","list","console","log","map","index","App","state","city","city2","bind","setState","callApi","e","target","value","preventDefault","url1","url2","axios","get","response","respone2","document","getElementById","transitionName","transitionEnterTimeout","transitionLeaveTimeout","Object","entries","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3610deba.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { FaSearch } from \"react-icons/fa\";\r\nimport \"./styles/Header.css\";\r\n\r\nexport default class Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"form\">\r\n        <h1 className=\"logo\">React Weather App</h1>\r\n\r\n        <form className=\"inputwrapper\" onSubmit={this.props.handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search By city\"\r\n            className=\"search\"\r\n            onChange={this.props.handlechange}\r\n            id=\"inputfield\"\r\n          />\r\n          <button type=\"submit\" className=\"searchicon\">\r\n            <FaSearch />\r\n          </button>\r\n        </form>\r\n        <div className=\"unit_buttons\">\r\n          <button\r\n            className=\"unit\"\r\n            style={{\r\n              backgroundColor:\r\n                this.props.unit === \"metric\" ? \"#008CBA\" : \"#e7e7e7\",\r\n              color: this.props.unit === \"metric\" ? \"white\" : \"black\",\r\n            }}\r\n            onClick={this.props.changeUnitToC}\r\n          >\r\n            °C\r\n          </button>\r\n          <button\r\n            className=\"unit\"\r\n            style={{\r\n              backgroundColor:\r\n                this.props.unit === \"imperial\" ? \"#008CBA\" : \"#e7e7e7\",\r\n              color: this.props.unit === \"imperial\" ? \"white\" : \"black\",\r\n            }}\r\n            onClick={this.props.changeUnitToF}\r\n          >\r\n            °F\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactCountryFlag from \"react-country-flag\";\r\nimport \"./styles/CurrentWeather.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faCloud,\r\n  faBolt,\r\n  faCloudRain,\r\n  faCloudShowersHeavy,\r\n  faSnowflake,\r\n  faSun,\r\n  faSmog,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nexport default function CurrentWeather(props) {\r\n  let dataCurrent = props.dataC;\r\n  let unixtime = props.dataC.data.dt;\r\n  let a = new Date(unixtime * 1000);\r\n  var months = [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"Jun\",\r\n    \"Jul\",\r\n    \"Aug\",\r\n    \"Sep\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\",\r\n  ];\r\n  var year = a.getFullYear();\r\n  var month = months[a.getMonth()];\r\n  var date = a.getDate();\r\n  var hour = a.getHours();\r\n  var minutes = \"0\" + a.getMinutes();\r\n  var time =\r\n    date + \" \" + month + \" \" + year + \" \" + hour + \":\" + minutes.substr(-2);\r\n  let country = dataCurrent.data.sys.country;\r\n  // var iconCode = dataCurrent.data.weather[0].icon;\r\n  // let imgLink = \"http://openweathermap.org/img/w/\" + iconCode + \".png\";\r\n\r\n  let main2 = dataCurrent.data.weather[0].main;\r\n  let icons = null;\r\n\r\n  if (main2 === \"Thunderstorm\") {\r\n    icons = faBolt;\r\n  } else if (main2 === \"Drizzle\") {\r\n    icons = faCloudRain;\r\n  } else if (main2 === \"Rain\") {\r\n    icons = faCloudShowersHeavy;\r\n  } else if (main2 === \"Snow\") {\r\n    icons = faSnowflake;\r\n  } else if (main2 === \"Clear\") {\r\n    icons = faSun;\r\n  } else if (main2 === \"Clouds\") {\r\n    icons = faCloud;\r\n  } else {\r\n    icons = faSmog;\r\n  }\r\n\r\n  return (\r\n    <div className=\"currentTemp\">\r\n      <div className=\"main_info\">\r\n        <div className=\"info\">\r\n          <div className=\"city_info\">\r\n            <h1>{dataCurrent.data.name},</h1>\r\n            <ReactCountryFlag\r\n              countryCode={country}\r\n              style={{\r\n                width: \"50px\",\r\n                height: \"50px\",\r\n              }}\r\n              svg\r\n            />\r\n          </div>\r\n          <h3>{time} </h3>\r\n        </div>\r\n\r\n        <div className=\"iconwrapper\">\r\n          <FontAwesomeIcon icon={icons} style={{ fontSize: \"80px\" }} />\r\n        </div>\r\n\r\n        <div className=\"temp-icon\">\r\n          <h3>{dataCurrent.data.weather[0].description} </h3>\r\n          <h1>\r\n            {dataCurrent.data.main.temp}&#176;\r\n            {props.unit === \"metric\" ? \"C\" : \"F\"}\r\n          </h1>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"temps\">\r\n        <h4 className=\"additional_info\">\r\n          humidity {dataCurrent.data.main.humidity}%{\" \"}\r\n        </h4>\r\n        <h4 className=\"additional_info\">\r\n          wind :{dataCurrent.data.wind.speed}\r\n          {props.unit === \"metric\" ? \" m/s\" : \" mph\"}\r\n        </h4>\r\n        <h4 className=\"additional_info\">\r\n          maximum temperature : {dataCurrent.data.main.temp_max}{\" \"}\r\n        </h4>\r\n        <h4 className=\"additional_info\">\r\n          minimum temperature : {dataCurrent.data.main.temp_min}\r\n        </h4>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function MiniDayForcast(props) {\r\n  let unixtime = props.dayData.dt;\r\n  let a = new Date(unixtime * 1000);\r\n  var months = [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"Jun\",\r\n    \"Jul\",\r\n    \"Aug\",\r\n    \"Sep\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\",\r\n  ];\r\n  var year = a.getFullYear();\r\n  var month = months[a.getMonth()];\r\n  var date = a.getDate();\r\n  var time = date + \" \" + month + \" \" + year;\r\n  var iconCode = props.dayData.weather[0].icon;\r\n  let imgLink = \"http://openweathermap.org/img/w/\" + iconCode + \".png\";\r\n  return (\r\n    <div className=\"oneday-wrapper\">\r\n      <h3>{time}</h3>\r\n      <h1 className=\"ftemp\">\r\n        {props.dayData.temp.day}&#176;\r\n        {props.unit === \"metric\" ? \"C\" : \"F\"}\r\n      </h1>\r\n      <h3>\r\n        {props.dayData.temp.eve}&#176;\r\n        {props.unit === \"metric\" ? \"C\" : \"F\"}\r\n      </h3>\r\n      <img\r\n        src={imgLink}\r\n        alt=\"icon discribing the weather\"\r\n        className=\"imgIconD\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport MiniDayForcast from \"./MiniDayForcast\";\r\nimport \"./styles/NextDays.css\";\r\n\r\nexport default function NextDays(props) {\r\n  let data1 = props.dataNextDays.data.list;\r\n  console.log(data1);\r\n\r\n  return (\r\n    <div className=\"daily-wrapper\">\r\n      <h1>Daily Forcast</h1>\r\n      <div className=\"days-container\">\r\n        {data1.map((day, index) => (\r\n          <MiniDayForcast dayData={day} key={index} unit={props.unit} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Header from \"./components/Header\";\nimport CurrentWeather from \"./components/CurrentWeather\";\nimport NextDays from \"./components/NextDays\";\nimport { CSSTransitionGroup } from \"react-transition-group\";\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      unit: \"metric\",\n      city: \"\",\n      city2: \"\",\n      dataC: {},\n      dataNextDays: {},\n    };\n    this.changeUnitToC = this.changeUnitToC.bind(this);\n    this.changeUnitToF = this.changeUnitToF.bind(this);\n    this.handlechange = this.handlechange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  changeUnitToC() {\n    if (this.state.city === \"\") {\n      if (this.state.unit === \"imperial\") {\n        this.setState({ unit: \"metric\" });\n      }\n    } else {\n      if (this.state.unit === \"imperial\") {\n        this.setState(\n          {\n            unit: \"metric\",\n          },\n          () => this.callApi()\n        );\n      }\n    }\n  }\n  changeUnitToF() {\n    if (this.state.city === \"\") {\n      if (this.state.unit === \"metric\") {\n        this.setState({ unit: \"imperial\" });\n      }\n    } else {\n      if (this.state.unit === \"metric\") {\n        this.setState({ unit: \"imperial\" }, () => this.callApi());\n      }\n    }\n  }\n  handlechange(e) {\n    this.setState({ city2: e.target.value });\n  }\n  handleSubmit(e) {\n    e.preventDefault();\n    this.setState({ city: this.state.city2 }, () => this.callApi());\n  }\n  async callApi() {\n    const url1 = `http://api.openweathermap.org/data/2.5/forecast/daily?q=${this.state.city}&appid=97a812996e1d3836d9ad739bbb5072d0&units=${this.state.unit}`;\n    const url2 = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&appid=97a812996e1d3836d9ad739bbb5072d0&units=${this.state.unit}`;\n    console.log(url1);\n    let response = await axios.get(url1);\n    this.setState({ dataNextDays: response });\n    let respone2 = await axios.get(url2);\n    this.setState({ dataC: respone2 });\n    document.getElementById(\"inputfield\").value = \"\";\n  }\n  render() {\n    return (\n      <div>\n        <Header\n          handlechange={this.handlechange}\n          handleSubmit={this.handleSubmit}\n          changeUnitToF={this.changeUnitToF}\n          changeUnitToC={this.changeUnitToC}\n          unit={this.state.unit}\n        />\n        <CSSTransitionGroup\n          transitionName=\"example\"\n          transitionEnterTimeout={3000}\n          transitionLeaveTimeout={300}\n        >\n          {Object.entries(this.state.dataC).length > 0 && (\n            <CurrentWeather dataC={this.state.dataC} unit={this.state.unit} />\n          )}\n          {Object.entries(this.state.dataNextDays).length > 0 && (\n            <NextDays\n              dataNextDays={this.state.dataNextDays}\n              unit={this.state.unit}\n            />\n          )}\n        </CSSTransitionGroup>\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}